{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport * as Three from 'three';\nimport Handsfree from 'handsfree';\nimport { TweenMax } from \"gsap\";\nexport default {\n  name: 'FirstScreen',\n  data: function data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      mesh: null,\n      meshBaloon: null,\n      loader: null,\n      mouseX: 0,\n      mouseY: 0,\n      rot: 0,\n      handsfree: null,\n      movex: 0,\n      movey: 0,\n      x: true,\n      maintitle1: null,\n      maintitle2: null,\n      maintitle3: null,\n      maintitle4: null,\n      titleList: null,\n      move: null,\n      scrollTop: null,\n      contDiv: null\n    };\n  },\n  methods: {\n    changeTitle: function changeTitle(a, b, c, d) {\n      var _this = this;\n\n      this.titleList = document.getElementById('TitleList');\n      this.maintitle1 = document.getElementById('maintitle1');\n      this.maintitle2 = document.getElementById('maintitle2');\n      this.maintitle3 = document.getElementById('maintitle3');\n      this.maintitle4 = document.getElementById('maintitle4');\n      this.maintitle1.style.opacity = a + \"\";\n      this.maintitle2.style.opacity = b + \"\";\n      this.maintitle3.style.opacity = c + \"\";\n      this.maintitle4.style.opacity = d + \"\";\n\n      if (a == 1) {\n        setTimeout(function () {\n          return _this.titleList.appendChild(_this.maintitle1);\n        }, 1000);\n      }\n\n      if (b == 1) {\n        setTimeout(function () {\n          return _this.titleList.appendChild(_this.maintitle2);\n        }, 1000);\n      }\n\n      if (c == 1) {\n        setTimeout(function () {\n          return _this.titleList.appendChild(_this.maintitle3);\n        }, 1000);\n      }\n\n      if (d == 1) {\n        setTimeout(function () {\n          return _this.titleList.appendChild(_this.maintitle4);\n        }, 1000);\n      }\n    },\n    init: function init() {\n      this.contDiv = document.getElementsByClassName('contact');\n      var container = document.getElementById('container');\n      this.camera = new Three.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 14);\n      this.camera.position.z = 11;\n      this.scene = new Three.Scene();\n      this.scene.fog = new Three.Fog(0x110F1A, 11, 12);\n      var lightA = new Three.AmbientLight(0xeaeaea); // soft white light\n\n      this.scene.add(lightA);\n      var light1 = new Three.DirectionalLight(0xF2453A, 0.75);\n      light1.position.set(500, 0, 0);\n      this.scene.add(light1); //var light2 = new Three.DirectionalLight( 0x229AF1, 0.25 )\n      //light2.position.set( -500, 0, 0 )\n      //this.scene.add( light2 )\n\n      var geometry = new Three.SphereGeometry(1, 32, 16);\n      var texture = new Three.TextureLoader().load('img/smile.98038d7b.jpg'); // immediately use the texture for material creation\n\n      var material = new Three.MeshStandardMaterial({\n        map: texture\n      });\n      material.roughness = 0.3;\n      material.metalness = 0.3;\n      this.mesh = new Three.Mesh(geometry, material);\n      this.mesh.rotation.y = 4;\n      this.mesh.position.x = 0;\n      this.mesh.position.y = 0;\n      this.mesh.position.z = 0;\n      this.mesh.rotation.x = 0;\n      this.mesh.rotation.y = 5;\n      this.mesh.rotation.z = 0;\n      this.mesh.scale.x = 1;\n      this.mesh.scale.y = 1;\n      this.mesh.scale.x = 1;\n      this.scene.add(this.mesh);\n      this.renderer = new Three.WebGLRenderer({\n        antialias: false,\n        alpha: true\n      });\n      this.renderer.setSize(window.innerWidth / 2, window.innerHeight / 2, false);\n      this.renderer.autoClear = false;\n      this.renderer.setClearColor(0x000000, 0.0);\n      container.appendChild(this.renderer.domElement);\n      this.renderer.domElement.style.width = 100 + '%';\n      this.renderer.domElement.style.height = 100 + '%';\n      window.addEventListener('resize', onWindowResize, false);\n      var a = this.camera;\n      var b = this.renderer;\n\n      function onWindowResize() {\n        a.aspect = window.innerWidth / window.innerHeight;\n        a.updateProjectionMatrix();\n        b.setSize(window.innerWidth / 2, window.innerHeight / 2, false);\n      }\n\n      this.changeTitle(1, 0, 0, 0);\n    },\n    handcam: function handcam() {\n      var _this2 = this;\n\n      this.changeTitle(0, 1, 0, 0);\n      this.handsfree = new Handsfree({\n        weboji: {\n          // Whether the model is enabled or not\n          enabled: true,\n          // Custom video settings\n          videoSettings: {\n            // The video, canvas, or image element\n            // Omit this to auto create a <VIDEO> with the webcam\n            videoElement: null,\n            // ID of the device to use\n            // Omit this to use the system default\n            deviceId: null,\n            // Which camera to use on the device\n            // Possible values: 'user' (front), 'environment' (back)\n            facingMode: 'user',\n            // Video dimensions\n            idealWidth: 320,\n            idealHeight: 240,\n            minWidth: 240,\n            maxWidth: 320,\n            minHeight: 240,\n            maxHeight: 240\n          },\n          // Thresholds needed before these are considered \"activated\"\n          // - Ranges from 0 (not active) to 1 (fully active)\n          morphs: {\n            threshold: {\n              smileRight: 0,\n              smileLeft: 0,\n              browLeftDown: 0,\n              browRightDown: 0,\n              browLeftUp: 0,\n              browRightUp: 0,\n              eyeLeftClosed: 0,\n              eyeRightClosed: 0,\n              mouthOpen: 0,\n              mouthRound: 0,\n              upperLip: 0\n            }\n          }\n        }\n      }); //console.log(this.handsfree.model.weboji=null)\n      // From inside a plugin\n\n      this.handsfree.use('lookHandsfree', function (_ref) {\n        var _weboji$rotation;\n\n        var weboji = _ref.weboji;\n        if (!(weboji !== null && weboji !== void 0 && (_weboji$rotation = weboji.rotation) !== null && _weboji$rotation !== void 0 && _weboji$rotation[0])) return; // Calculate rotation\n\n        _this2.rot = weboji.rotation; //document.getElementById(\"xposcube\").innerHTML = handPosition.x;\n        //document.getElementById(\"yposcube\").innerHTML = handPosition.y;\n        //document.getElementById(\"zposcube\").innerHTML = rot[2];\n      }); //handsfree.enablePlugins('browser');\n\n      var constraints = {\n        audio: false,\n        video: {\n          width: 1280,\n          height: 720\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {\n        console.log('camera go');\n\n        _this2.changeTitle(0, 0, 1, 0);\n\n        _this2.handsfree.start();\n\n        console.log(mediaStream);\n      }).catch(function (err) {\n        console.log('camera null');\n        console.log(err); // обработка ошибки\n      });\n    },\n    ///////////////////////////////////handsfree\n    animate: function animate() {\n      requestAnimationFrame(this.animate);\n      this.scrollTop = document.documentElement.scrollTop || document.body.scrollTop; //console.log(this.mouseX, this.mouseY)\n\n      if (this.contDiv[0] && this.scrollTop > window.innerHeight / 2 && this.scrollTop < this.contDiv[0].offsetTop - this.contDiv[0].clientHeight / 2) {\n        this.mesh.position.z += (-1.5 - this.mesh.position.z) * 0.03;\n      } else {\n        this.mesh.position.z += (0 - this.mesh.position.z) * 0.03;\n      }\n\n      if (!this.rot[1]) {\n        this.mesh.position.x += (this.mouseX * 0.01 - this.mesh.position.x) * 0.03;\n        this.mesh.position.y += (-this.mouseY * 0.01 - this.mesh.position.y) * 0.03;\n        this.mesh.rotation.y += this.mouseX * 0.0001; //this.mesh.rotation.x += this.mouseY * 0.0001\n        //this.mesh.rotation.z = this.mouseX * 0.001\n        //this.mesh.rotation.y += (4+ this.mouseX * 0.002 - this.mesh.rotation.y) * 0.03\n\n        this.mesh.rotation.x += (4 + this.mouseY * 0.002 - this.mesh.rotation.x) * 0.03;\n        this.mesh.rotation.z += (4 + this.mouseX * 0.002 - this.mesh.rotation.z) * 0.03;\n      }\n\n      if (this.rot[1]) {\n        TweenMax.to(this, 1, {\n          movex: this.rot[1],\n          movey: -this.rot[0]\n        });\n        this.mesh.position.x = this.movex * 5;\n        this.mesh.position.y = this.movey * 5;\n        this.camera.position.y = -1;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n    },\n    getMousePos: function getMousePos(event) {\n      this.mouseX = event.clientX - window.innerWidth / 2;\n      this.mouseY = event.clientY - window.innerHeight / 2;\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n    this.animate();\n    document.addEventListener('mousemove', this.getMousePos, false);\n  }\n};","map":null,"metadata":{},"sourceType":"module"}