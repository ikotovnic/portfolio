{"ast":null,"code":"//\n//\n//\n//\n//\n//\nimport * as Three from 'three';\nimport Handsfree from 'handsfree';\nimport TweenMax from \"gsap/TweenMax\";\nexport default {\n  name: 'ThreeTest',\n  data: function data() {\n    return {\n      camera: null,\n      scene: null,\n      renderer: null,\n      mesh: null,\n      mouseX: 0,\n      mouseY: 0,\n      rot: 0,\n      handsfree: null\n    };\n  },\n  methods: {\n    init: function init() {\n      var container = document.getElementById('container');\n      this.camera = new Three.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 0.01, 10);\n      this.camera.position.z = 4;\n      this.scene = new Three.Scene();\n      var geometry = new Three.BoxGeometry(0.2, 0.2, 0.2);\n      var material = new Three.MeshNormalMaterial();\n      this.mesh = new Three.Mesh(geometry, material);\n      this.scene.add(this.mesh);\n      this.renderer = new Three.WebGLRenderer({\n        antialias: true,\n        alpha: true\n      });\n      this.renderer.setSize(container.clientWidth, container.clientHeight);\n      this.renderer.autoClear = false;\n      this.renderer.setClearColor(0x000000, 0.0);\n      container.appendChild(this.renderer.domElement);\n      document.addEventListener('mousemove', onDocumentMouseMove, false);\n\n      function onDocumentMouseMove(event) {\n        this.mouseX = event.clientX - window.innerWidth / 2;\n        this.mouseY = event.clientY - window.screen.height / 2; //console.log(this.mouseX)\n      }\n    },\n    handcam: function handcam() {\n      var _this = this;\n\n      this.handsfree = new Handsfree({\n        weboji: {\n          // Whether the model is enabled or not\n          enabled: true,\n          // Custom video settings\n          videoSettings: {\n            // The video, canvas, or image element\n            // Omit this to auto create a <VIDEO> with the webcam\n            videoElement: null,\n            // ID of the device to use\n            // Omit this to use the system default\n            deviceId: null,\n            // Which camera to use on the device\n            // Possible values: 'user' (front), 'environment' (back)\n            facingMode: 'user',\n            // Video dimensions\n            idealWidth: 320,\n            idealHeight: 240,\n            minWidth: 240,\n            maxWidth: 320,\n            minHeight: 240,\n            maxHeight: 240\n          },\n          // Thresholds needed before these are considered \"activated\"\n          // - Ranges from 0 (not active) to 1 (fully active)\n          morphs: {\n            threshold: {\n              smileRight: 0,\n              smileLeft: 0,\n              browLeftDown: 0,\n              browRightDown: 0,\n              browLeftUp: 0,\n              browRightUp: 0,\n              eyeLeftClosed: 0,\n              eyeRightClosed: 0,\n              mouthOpen: 0,\n              mouthRound: 0,\n              upperLip: 0\n            }\n          }\n        }\n      }); // From inside a plugin\n\n      this.handsfree.use('lookHandsfree', function (_ref) {\n        var _weboji$rotation;\n\n        var weboji = _ref.weboji;\n        if (!(weboji !== null && weboji !== void 0 && (_weboji$rotation = weboji.rotation) !== null && _weboji$rotation !== void 0 && _weboji$rotation[0])) return; // Calculate rotation\n\n        _this.rot = weboji.rotation; //document.getElementById(\"xposcube\").innerHTML = handPosition.x;\n        //document.getElementById(\"yposcube\").innerHTML = handPosition.y;\n        //document.getElementById(\"zposcube\").innerHTML = rot[2];\n      }); //handsfree.enablePlugins('browser');\n\n      var constraints = {\n        audio: false,\n        video: {\n          width: 1280,\n          height: 720\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(function (mediaStream) {\n        console.log('camera go');\n\n        _this.handsfree.start();\n      }).catch(function (err) {\n        console.log('camera null'); // обработка ошибки\n      });\n    },\n    ///////////////////////////////////handsfree\n    animate: function animate() {\n      requestAnimationFrame(this.animate);\n      this.mesh.rotation.x += 0.01;\n      this.mesh.rotation.y += 0.02;\n\n      if (this.rot[1]) {\n        console.log(this.rot[1]);\n        this.mesh.position.x = this.rot[1] * 5;\n      }\n\n      this.renderer.render(this.scene, this.camera);\n    }\n  },\n  mounted: function mounted() {\n    this.handcam();\n    this.init();\n    this.animate();\n  }\n};","map":{"version":3,"mappings":";;;;;;AAOA;AACA;AACA;AAEA;AACAA,mBADA;AAEAC,MAFA,kBAEA;AACA;AACAC,kBADA;AAEAC,iBAFA;AAGAC,oBAHA;AAIAC,gBAJA;AAKAC,eALA;AAMAC,eANA;AAOAC,YAPA;AAQAC;AARA;AAUA,GAbA;AAcAC;AACAC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAAC;AAAAC;AAAA;AACA;AACA;AACA;AACAC;AAEAC;;AACA;AACA;AACA,+DAFA,CAGA;AACA;AACA,KAvBA;AAyBAC;AAAA;;AACA;AACAC;AACA;AACAC,uBAFA;AAGA;AACAC;AACA;AACA;AACAC,8BAHA;AAKA;AACA;AACAC,0BAPA;AASA;AACA;AACAC,8BAXA;AAaA;AACAC,2BAdA;AAeAC,4BAfA;AAgBAC,yBAhBA;AAiBAC,yBAjBA;AAkBAC,0BAlBA;AAmBAC;AAnBA,WAJA;AAyBA;AACA;AACAC;AACAC;AACAC,2BADA;AAEAC,0BAFA;AAGAC,6BAHA;AAIAC,8BAJA;AAKAC,2BALA;AAMAC,4BANA;AAOAC,8BAPA;AAQAC,+BARA;AASAC,0BATA;AAUAC,2BAVA;AAWAC;AAXA;AADA;AA3BA;AADA,SADA,CA8CA;;AACA;AAAA;;AAAA;AACA,mKADA,CAEA;;AACA,oCAHA,CAKA;AACA;AACA;AACA,OARA,EA/CA,CAwDA;;AACA;AAAAC;AAAAC;AAAAC;AAAAC;AAAA;AAAA;AACAC,uDACAC,IADA,CACA;AACAC;;AACA;AAEA,OALA,EAMAC,KANA,CAMA;AACAD,mCADA,CAEA;AACA,OATA;AAUA,KA7FA;AA8FA;AACAE;AACAC;AACA;AACA;;AACA;AACAH;AACA;AACA;;AACA;AACA;AAxGA,GAdA;AAwHAI,SAxHA,qBAwHA;AACA;AACA;AACA;AACA;AA5HA","names":["name","data","camera","scene","renderer","mesh","mouseX","mouseY","rot","handsfree","methods","init","antialias","alpha","container","document","handcam","weboji","enabled","videoSettings","videoElement","deviceId","facingMode","idealWidth","idealHeight","minWidth","maxWidth","minHeight","maxHeight","morphs","threshold","smileRight","smileLeft","browLeftDown","browRightDown","browLeftUp","browRightUp","eyeLeftClosed","eyeRightClosed","mouthOpen","mouthRound","upperLip","audio","video","width","height","navigator","then","console","catch","animate","requestAnimationFrame","mounted"],"sourceRoot":"src/views","sources":["AboutView.vue"],"sourcesContent":["<template>\n  <div>\n    <div id=\"container\"></div>\n  </div>\n</template>\n\n<script>\n  import * as Three from 'three'\n  import Handsfree from 'handsfree'\n  import TweenMax from \"gsap/TweenMax\";\n\n  export default {\n    name: 'ThreeTest',\n    data () {\n      return {\n        camera: null,\n        scene: null,\n        renderer: null,\n        mesh: null,\n        mouseX: 0,\n        mouseY: 0,\n        rot:0,\n        handsfree: null\n      }\n    },\n    methods: {\n      init: function () {\n        let container = document.getElementById('container')\n        this.camera = new Three.PerspectiveCamera(70, container.clientWidth / container.clientHeight, 0.01, 10)\n        this.camera.position.z = 4;\n        this.scene = new Three.Scene()\n        let geometry = new Three.BoxGeometry(0.2, 0.2, 0.2)\n        let material = new Three.MeshNormalMaterial()\n        this.mesh = new Three.Mesh(geometry, material)\n        this.scene.add(this.mesh)\n\n        this.renderer = new Three.WebGLRenderer({antialias: true, alpha: true })\n        this.renderer.setSize(container.clientWidth, container.clientHeight)\n        this.renderer.autoClear = false;\n        this.renderer.setClearColor(0x000000, 0.0);\n        container.appendChild(this.renderer.domElement)\n\n        document.addEventListener( 'mousemove', onDocumentMouseMove, false );\n        function onDocumentMouseMove( event ) {\n          this.mouseX = ( event.clientX - window.innerWidth / 2 )\n          this.mouseY = ( event.clientY - window.screen.height / 2 )\n          //console.log(this.mouseX)\n        }\n      },\n\n      handcam: function() {\n        this.handsfree = new Handsfree({\n          weboji: {\n            // Whether the model is enabled or not\n            enabled: true,\n              // Custom video settings\n            videoSettings: {\n              // The video, canvas, or image element\n              // Omit this to auto create a <VIDEO> with the webcam\n              videoElement: null,\n\n              // ID of the device to use\n              // Omit this to use the system default\n              deviceId: null,\n\n              // Which camera to use on the device\n              // Possible values: 'user' (front), 'environment' (back)\n              facingMode: 'user',\n\n              // Video dimensions\n              idealWidth: 320,\n              idealHeight: 240,\n              minWidth: 240,\n              maxWidth: 320,\n              minHeight: 240,\n              maxHeight: 240\n            },\n            // Thresholds needed before these are considered \"activated\"\n            // - Ranges from 0 (not active) to 1 (fully active)\n            morphs: {\n              threshold: {\n                smileRight: 0,\n                smileLeft: 0,\n                browLeftDown: 0,\n                browRightDown: 0,\n                browLeftUp: 0,\n                browRightUp: 0,\n                eyeLeftClosed: 0,\n                eyeRightClosed: 0,\n                mouthOpen: 0,\n                mouthRound: 0,\n                upperLip: 0\n              }\n            }\n          }\n        })\n        // From inside a plugin\n        this.handsfree.use('lookHandsfree', ({weboji}) => {\n          if (!weboji?.rotation?.[0]) return\n          // Calculate rotation\n          this.rot = weboji.rotation\n\n          //document.getElementById(\"xposcube\").innerHTML = handPosition.x;\n          //document.getElementById(\"yposcube\").innerHTML = handPosition.y;\n          //document.getElementById(\"zposcube\").innerHTML = rot[2];\n        })\n        //handsfree.enablePlugins('browser');\n        var constraints = { audio: false, video: { width: 1280, height: 720 } };\n        navigator.mediaDevices.getUserMedia(constraints)\n        .then( mediaStream => {\n          console.log('camera go')\n          this.handsfree.start()\n\n        })\n        .catch(function(err) {\n          console.log('camera null')\n          // обработка ошибки\n        });\n      },\n///////////////////////////////////handsfree\n      animate: function () {\n        requestAnimationFrame(this.animate)      \n        this.mesh.rotation.x += 0.01\n        this.mesh.rotation.y += 0.02\n        if(this.rot[1]){\n          console.log(this.rot[1]);\n          this.mesh.position.x = this.rot[1]*5\n        }\n        this.renderer.render(this.scene, this.camera)\n      }\n    },\n    mounted () {\n      this.handcam()\n      this.init()\n      this.animate()\n    }\n  }\n</script>\n<style scoped>\n  #container {\n    height: 80vh;\n    background-color: black;\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}